name: Build

on:
  push:
    branches: [ master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: true
      CCACHE_MAXSIZE: 1G

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}

      - name: Generate signing config
        run: |
          key_base64="${{ secrets.SIGNING_KEY }}"
          echo -n "$key_base64" | base64 -d > signing.jks
          echo "releaseStoreFile=signing.jks" >> gradle.properties
          echo "releaseStorePassword=020727" >> gradle.properties
          echo "releaseKeyAlias=li" >> gradle.properties
          echo "releaseKeyPassword=lyc020727" >> gradle.properties

      - name: Build with Gradle
        run: |
          echo 'org.gradle.caching=true' >> gradle.properties
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          echo 'android.native.buildOutput=verbose' >> gradle.properties
          ./gradlew -PbuildWithGitSuffix=true assembleRelease assembleDebug

      - name: Upload built apk
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: snapshot
          path: |
            ${{ github.workspace }}/app/build/outputs/apk
            ${{ github.workspace }}/app/build/outputs/mapping

      - name: Post to channel
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
        env:
          CHANNEL_ID: ${{ secrets.TELEGRAM_TO }}
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          COMMIT_MESSAGE: |+
            ${{ github.event.head_commit.message }}
            by `${{ github.event.head_commit.author.name }}` [detail](${{ github.event.head_commit.url }})
        run: |
          export release=$(find app/release/ -name "QMHelper-*.apk")
          ESCAPED=`python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ["COMMIT_MESSAGE"].replace(".","\.").replace("#","\\#"))))'`
          curl -v "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://release%22,%22parse_mode%22:%22MarkdownV2%22,%22caption%22:${ESCAPED}%7D%5D"  -F release="@$release"
